// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Computer.hdl

/**
 * The HACK computer, including CPU, ROM and RAM.
 * When reset is 0, the program stored in the computer's ROM executes.
 * When reset is 1, the execution of the program restarts. 
 * Thus, to start a program's execution, reset must be pushed "up" (1)
 * and "down" (0). From this point onward the user is at the mercy of 
 * the software. In particular, depending on the program's code, the 
 * screen may show some output and the user may be able to interact 
 * with the computer via the keyboard.
 */

CHIP Computer {

    IN reset;

    PARTS:
    // Put your code here:
    // 將負載信號（load）根據 address[14] 分配到 RAM 或屏幕
    DMux(in=load, sel=address[14], a=loadRam, b=loadScreen);

    // 16K RAM 模組：根據地址 address[0..13] 存取數據
    RAM16K(in=in, address=address[0..13], load=loadRam, out=outRam);
    // 屏幕模組：根據地址 address[0..12] 存取數據
    Screen(in=in, address=address[0..12], load=loadScreen, out=outScreen);
    // 鍵盤模組：提供鍵盤的輸出值
    Keyboard(out=outKeyboard);

    // 根據地址高位 address[13..14] 選擇輸出數據
    // a: RAM 的輸出, b: RAM 的輸出（未使用的冗餘）, c: 屏幕的輸出, d: 鍵盤的輸出
    Mux4Way16(a=outRam, b=outRam, c=outScreen, d=outKeyboard, sel=address[13..14], out=out);

    // 程序存儲器（ROM32K）：從程序計數器（PC）讀取指令
    ROM32K(address=pc, out=instruction);
    // CPU 模組：執行指令，處理數據流和控制信號
    CPU(inM=memoryOut, instruction=instruction, reset=reset, outM=outM, writeM=writeM, addressM=addressM, pc=pc);
    // Memory 模組：根據 CPU 的地址和負載信號，讀寫數據
    Memory(in=outM, load=writeM, address=addressM, out=memoryOut);

}
